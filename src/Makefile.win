# Run: make Release 
# Run: make Debug 
CC=g++
# comflag = -m32
# comflag = -m64
comflag = $(COMFLAG)
#com_ver = MinGW-W64_8.1.0
com_ver = $(shell $(CC) -dumpmachine)-gcc_$(shell $(CC) -dumpversion)

# INSTALL_DIR_ROOT = e:/Eclipse_Mars/workspace/_DSPE_lib_minGW_
# INSTALL_DIR_ROOT = ./_DSPE_lib_minGW_
INSTALL_DIR_ROOT = ../_DSPE_lib_minGW_

SRC_DIR = ./src
SRC_EXAMPLES_DIR = ./examples
SRC_CPP_SUBDIR = $(SRC_DIR)/cpp

OUT_DIR_RLS = ./out_win_rls
OUT_DIR_DBG = ./out_win_dbg


INCLUDES_DBG := -I"$(SRC_DIR)/include" -I"$(SRC_DIR)/include/dbg" 
INCLUDES_RLS := -I"$(SRC_DIR)/include" -I"$(SRC_DIR)/include/rls"
LIBS := -lwinmm -lws2_32

DFLAGS         = -DWIN32 -DDEVCPP -DINCLUDE_DSPE_EXAMPLES
# -D INCLUDE_DSPE_EXAMPLES # TODO: u≈ºycie w ramach kompilacji Main.cpp w trybie DEBUG
CFLAGS_release = $(comflag) -std=c++0x -O3 -Wall -c -fmessage-length=0 -fno-strict-aliasing 
CFLAGS_debug   = $(comflag) -std=c++0x -O0 -g3 -Wall -c -fmessage-length=0 -W -Wshadow -Wconversion -fstrict-aliasing -fmax-errors=5
# -U__STRICT_ANSI__ jest potrzebne do kompilacji debug_new.cpp, jezeli pominac ten plik to mozna rowniez wyrzucic te opcje
#CFLAGS_debug   = $(comflag) -std=c++0x -O0 -g3 -Wall -c -fmessage-length=0 -W -Wshadow -Wco#nversion -fstrict-aliasing -U__STRICT_ANSI__
LINKER_FLAGS_debug   = $(comflag)  -static-libgcc -static-libstdc++ -static
LINKER_FLAGS_release = $(comflag)  -s -static-libgcc -static-libstdc++ -static

SOURCES_NAMES = 
SOURCES_NAMES += DSP_AudioMixer.cpp DSP_Fourier.cpp DSP_misc.cpp DSP_clocks.cpp DSP_modules.cpp DSP_modules2.cpp 
SOURCES_NAMES += DSP_DOT.cpp DSP_modules_misc.cpp DSP_IO.cpp DSP_logstream.cpp WMM_support.cpp
SOURCES = $(addprefix $(SRC_CPP_SUBDIR)/,$(SOURCES_NAMES))

SOURCES_DBG =
SOURCES_DBG += $(SRC_DIR)/Main.cpp 

SOURCES_EXAMPLES_DBG =
SOURCES_EXAMPLES_DBG += $(SRC_EXAMPLES_DIR)/hello.cpp $(SRC_EXAMPLES_DIR)/sound_input.cpp 

# ################################################# #
# Just sockets
SOURCES_SOCKETS_NAMES = DSP_sockets.cpp 
SOURCES_SOCKETS = $(addprefix $(SRC_CPP_SUBDIR)/,$(SOURCES_SOCKETS_NAMES))


# ################################################# #
# RELEASE
OBJECTS_Release 		:= $(SOURCES:%.cpp=$(OUT_DIR_RLS)/%.o)
DEPENDS_Release 		:= $(SOURCES:%.cpp=$(OUT_DIR_RLS)/%.d)
OBJECTS_SOCKETS_Release := $(SOURCES_SOCKETS:%.cpp=$(OUT_DIR_RLS)/%.o)
DEPENDS_SOCKETS_Release := $(DEPENDS_SOCKETS:%.cpp=$(OUT_DIR_RLS)/%.d)




# ################################################# #
# DEBUG
OBJECTS_Debug 		   := $(SOURCES:%.cpp=$(OUT_DIR_DBG)/%.o)
DEPENDS_Debug 		   := $(SOURCES:%.cpp=$(OUT_DIR_DBG)/%.d)
OBJECTS_Debug 		   += $(SOURCES_DBG:%.cpp=$(OUT_DIR_DBG)/%.o)
DEPENDS_Debug 		   += $(SOURCES_DBG:%.cpp=$(OUT_DIR_DBG)/%.d)
OBJECTS_EXAMPLES_Debug := $(SOURCES_EXAMPLES_DBG:%.cpp=$(OUT_DIR_DBG)/%.o)
DEPENDS_EXAMPLES_Debug := $(SOURCES_EXAMPLES_DBG:%.cpp=$(OUT_DIR_DBG)/%.d)
OBJECTS_SOCKETS_Debug  := $(SOURCES_SOCKETS:%.cpp=$(OUT_DIR_DBG)/%.o)
DEPENDS_SOCKETS_Debug  := $(SOURCES_SOCKETS:%.cpp=$(OUT_DIR_DBG)/%.d)

# SRC_DBG_SUBDIR = nvwa
# SOURCES_MISC_Debug += debug_new.cpp
# OBJECTS_MISC_Debug := $(SOURCES_MISC_Debug:%.cpp=$(OUT_DIR_DBG)/$(SRC_DBG_SUBDIR)/%.o)
OBJECTS_MISC_Debug := 

# ################################################# #
-include $(DEPENDS_Release)
-include $(DEPENDS_SOCKETS_Release)
-include $(DEPENDS_Debug)
-include $(DEPENDS_SOCKETS_Release)
-include $(DEPENDS_EXAMPLES_Debug)

all: Debug Release


# ########################################################################################### #	
# ########################################################################################### #	
Release: $(OUT_DIR_RLS)/libDSPE.a $(OUT_DIR_RLS)/libDSPEsockets.a

$(OUT_DIR_RLS)/libDSPE.a: $(OBJECTS_Release) 
	@echo Preparing lib file $@
	ar rc $@ $(OBJECTS_Release)
	ranlib $@

$(OUT_DIR_RLS)/libDSPEsockets.a:  $(OBJECTS_SOCKETS_Release)
	@echo Preparing lib file $@
	ar rc $@  $(OBJECTS_SOCKETS_Release)
	ranlib $@

# Z podanej listy usuwany $(OUT_DIR_RLS)/ oraz '.o' zamieniamy na '.cpp'
$(OBJECTS_Release) $(OBJECTS_SOCKETS_Release): $(OUT_DIR_RLS)/%.o : %.cpp
	@echo $(@D) $< $@
	
	#mkdir -p $(OUT_DIR_RLS)/$(SRC_CPP_SUBDIR)
	mkdir -p $(@D)
	$(CC) $(DFLAGS) $(CFLAGS_release) $(INCLUDES_RLS) -MMD $< -o $@

# ########################################################################################### #	
# ########################################################################################### #	
# Debug: $(OUT_DIR_DBG)/libDSPE.a $(OUT_DIR_DBG)/libDSPEsockets.a $(OUT_DIR_DBG)/libDSPEexamples.a
Debug: $(OUT_DIR_DBG)/DSPElib.exe

$(OUT_DIR_DBG)/DSPElib.exe: $(OUT_DIR_DBG)/libDSPE.a $(OUT_DIR_DBG)/libDSPEsockets.a $(OUT_DIR_DBG)/libDSPEexamples.a
	$(CC) -L"$(OUT_DIR_DBG)" "$(OUT_DIR_DBG)/src/Main.o" -o"$(OUT_DIR_DBG)/DSPElib.exe" $(LINKER_FLAGS_debug) -lDSPE -lDSPEsockets -lDSPEexamples  $(LIBS)

$(OUT_DIR_DBG)/libDSPE.a: $(OBJECTS_Debug) $(OBJECTS_MISC_Debug)
	@echo Preparing lib file $@
	ar rc $@ $(OBJECTS_Debug) $(OBJECTS_MISC_Debug)
	ranlib $@
$(OUT_DIR_DBG)/libDSPEsockets.a:  $(OBJECTS_SOCKETS_Debug)
	@echo Preparing lib file $@
	ar rc $@  $(OBJECTS_SOCKETS_Debug)
	ranlib $@

$(OUT_DIR_DBG)/libDSPEexamples.a:  $(OBJECTS_EXAMPLES_Debug)
	@echo Preparing lib file $@
	ar rc $@  $(OBJECTS_EXAMPLES_Debug)
	ranlib $@

# Z podanej listy usuwany $(OUT_DIR_RLS)/ oraz '.o' zamieniamy na '.cpp'
$(OBJECTS_Debug) $(OBJECTS_EXAMPLES_Debug) $(OBJECTS_SOCKETS_Debug) $(OBJECTS_MISC_Debug): $(OUT_DIR_DBG)/%.o : %.cpp
	@echo $(@D) $< $@
	
	mkdir -p $(@D)
	$(CC) $(DFLAGS) $(CFLAGS_debug) $(INCLUDES_DBG) -MMD $< -o $@

install_library: Debug Release
    # https://www.geeksforgeeks.org/install-command-in-linux-with-examples/
	# https://www.lifewire.com/install-linux-command-4091911
	@echo '  >> Installing Library'
	@echo '  >>   creating folders'
	install -d "$(INSTALL_DIR_ROOT)"
	install -d "$(INSTALL_DIR_ROOT)/$(com_ver)"
	install -d "$(INSTALL_DIR_ROOT)/$(com_ver)/rls"
	install -d "$(INSTALL_DIR_ROOT)/$(com_ver)/dbg"
	install -d "$(INSTALL_DIR_ROOT)/$(com_ver)/include"
	install -d "$(INSTALL_DIR_ROOT)/$(com_ver)/include/rls"
	install -d "$(INSTALL_DIR_ROOT)/$(com_ver)/include/dbg"
	install -d "$(INSTALL_DIR_ROOT)/$(com_ver)/examples"
	install -d "$(INSTALL_DIR_ROOT)/$(com_ver)/examples/matlab"
	install -d "$(INSTALL_DIR_ROOT)/$(com_ver)/toolbox"

	@echo '  >>   copying examples'
	# install -p -D ./examples/* -t "$(INSTALL_DIR_ROOT)/$(com_ver)/examples"
	#cp -r -p -u ./examples/* "$(INSTALL_DIR_ROOT)/$(com_ver)/examples"
	cp -p -u ./examples/*.cpp "$(INSTALL_DIR_ROOT)/$(com_ver)/examples"
	cp -p -u ./examples/*.h "$(INSTALL_DIR_ROOT)/$(com_ver)/examples"
	cp -p -u ./examples/*.bat "$(INSTALL_DIR_ROOT)/$(com_ver)/examples"
	cp -p -u ./examples/makefile* "$(INSTALL_DIR_ROOT)/$(com_ver)/examples"
	cp -p -u ./examples/DSPElib.wav "$(INSTALL_DIR_ROOT)/$(com_ver)/examples"
	cp -p -u ./examples/matlab/*.m "$(INSTALL_DIR_ROOT)/$(com_ver)/examples/matlab"
	@echo '  >>   copying toolbox'
	cp -p -u ./matlab/toolbox/*.m "$(INSTALL_DIR_ROOT)/$(com_ver)/toolbox"
	@echo '  >>   copying includes'
	cp -p -u ./src/include/*.h "$(INSTALL_DIR_ROOT)/$(com_ver)/include"
	cp -p -u ./src/include/rls/DSP_setup.h "$(INSTALL_DIR_ROOT)/$(com_ver)/include/rls"
	cp -p -u ./src/include/dbg/DSP_setup.h "$(INSTALL_DIR_ROOT)/$(com_ver)/include/dbg"
	
	@echo '  >>   copying release libraries '
	cp -p -u $(OUT_DIR_RLS)/libDSPE.a "$(INSTALL_DIR_ROOT)/$(com_ver)/rls"
	cp -p -u $(OUT_DIR_RLS)/libDSPEsockets.a "$(INSTALL_DIR_ROOT)/$(com_ver)/rls"

	@echo '  >>   copying debug libraries '
	cp -p -u $(OUT_DIR_DBG)/libDSPE.a "$(INSTALL_DIR_ROOT)/$(com_ver)/dbg"
	cp -p -u $(OUT_DIR_DBG)/libDSPEsockets.a "$(INSTALL_DIR_ROOT)/$(com_ver)/dbg"


clean:
	@if [ -d "$(OUT_DIR_DBG)" ]; then \
		echo "cleaning $(OUT_DIR_DBG) ..."; \
		#find $(OUT_DIR_DBG)/ -name "*.o" -type f -delete; \
		rm -rf $(OUT_DIR_DBG)/$(SRC_CPP_SUBDIR)/*.d; \
		rm -rf $(OUT_DIR_DBG)/$(SRC_CPP_SUBDIR)/*.o; \
		rm -rf $(OUT_DIR_DBG)/$(SRC_CPP_SUBDIR); \
		rm -rf $(OUT_DIR_DBG)/*.a; \
		rm -rf $(OUT_DIR_DBG); \
		echo "cleaned $(OUT_DIR_DBG)"; \
	fi 
	@if [ -d "$(OUT_DIR_RLS)" ]; then \
		echo "cleaning $(OUT_DIR_RLS) ..."; \
		#find $(OUT_DIR_RLS)/ -name "*.o" -type f -delete; \
		rm -rf $(OUT_DIR_RLS)/$(SRC_CPP_SUBDIR)/*.d; \
		rm -rf $(OUT_DIR_RLS)/$(SRC_CPP_SUBDIR)/*.o; \
		rm -rf $(OUT_DIR_RLS)/$(SRC_CPP_SUBDIR); \
		rm -rf $(OUT_DIR_RLS)/*.a; \
		rm -rf $(OUT_DIR_RLS); \
		echo "cleaned $(OUT_DIR_RLS)"; \
	fi 
	
.PHONY: all Debug Release clean

